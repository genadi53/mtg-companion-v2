// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    decks         Deck[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Set  {
  id                String       @id
  code              String
  mtgo_code         String?
  arena_code        String?
  tcgplayer_id      Int?
  name              String
  set_type          String
  released_at       String?
  block_code        String?
  block             String?
  parent_set_code   String?
  card_count        Int
  printed_size      Int?
  digital           Boolean
  foil_only         Boolean
  nonfoil_only      Boolean
  uri               String
  scryfall_uri      String
  search_uri        String?
  icon_svg_uri      String
}

model CardFacesDetails  {
  id                  Int       @id @default(autoincrement())
  name                String
  mana_cost           String
  type_line           String
  oracle_text         String
  colors              String
  artist              String
  artist_id           String
  illustration_id     String
  image_url           String
}

model Card {
  id                String       @id
  decks             CardsInDecks[]
}


model Deck {
  id                 String       @id
  name               String
  format             Formats
  cover_image_url    String
  creator_id         String
  creator            User      @relation(fields: [creator_id], references: [id])
  cards              CardsInDecks[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model CardsInDecks {
  deck               Deck     @relation(fields: [deck_id], references: [id])
  deck_id            String 
  card               Card     @relation(fields: [card_id], references: [id])
  card_id            String
  number_copies      Int
  addedAt            DateTime @default(now())

  @@id([deck_id, card_id])
}

enum Formats {
  standard
  future
  historic
  gladiator
  pioneer
  explorer
  modern
  legacy
  pauper
  vintage
  penny
  commander
  oathbreaker
  brawl
  historicbrawl
  alchemy
  paupercommander
  duel
  oldschool
  premodern
  predh
}